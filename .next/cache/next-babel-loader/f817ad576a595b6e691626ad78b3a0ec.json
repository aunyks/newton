{"ast":null,"code":"\"use strict\";\n\nvar _operations = _interopRequireDefault(require(\"../../lib/operations.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept'); // Get the math function operation based\n  // on the operation that we're given\n\n  const f = _operations.default[req.query.operation]; // If the url isn't malformed, send our response\n  // with an answer. If not, send an error response\n\n  if (f === undefined) {\n    res.statusCode = 400;\n    res.json({\n      error: 'Unknown operation'\n    });\n  } else {\n    // Compute the requested calculation and respond.\n    // If we cannot compute it properly (error thrown),\n    // then tell the client\n    try {\n      // The result from passing the data parameter\n      // to the operation function\n      req.query.data = req.query.data.split('(over)').join('/');\n      const computation = f(req.query.data);\n      res.statusCode = 200;\n      res.json({\n        operation: req.query.operation,\n        expression: req.query.data,\n        result: computation\n      });\n    } catch (err) {\n      // Record this error\n      console.error(err);\n      res.statusCode = 500; // Let the client know of our inability to\n      // perform the requested calculation\n\n      res.json({\n        error: 'Unable to perform calculation'\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/aunyks/dev/newton-api/pages/api/[operation]/[data].js"],"names":["module","exports","req","res","setHeader","f","operations","query","operation","undefined","statusCode","json","error","data","split","join","computation","expression","result","err","console"],"mappings":";;AAAA;;;;AAEAA,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7BA,EAAAA,GAAG,CAACC,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAD,EAAAA,GAAG,CAACC,SAAJ,CAAc,8BAAd,EAA8C,gDAA9C,EAF6B,CAI7B;AACA;;AACA,QAAMC,CAAC,GAAGC,oBAAWJ,GAAG,CAACK,KAAJ,CAAUC,SAArB,CAAV,CAN6B,CAQ7B;AACA;;AACA,MAAIH,CAAC,KAAKI,SAAV,EAAqB;AACnBN,IAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,IAAAA,GAAG,CAACQ,IAAJ,CAAS;AACPC,MAAAA,KAAK,EAAE;AADA,KAAT;AAGD,GALD,MAKO;AACL;AACA;AACA;AACA,QAAI;AACF;AACA;AACAV,MAAAA,GAAG,CAACK,KAAJ,CAAUM,IAAV,GAAiBX,GAAG,CAACK,KAAJ,CAAUM,IAAV,CAAeC,KAAf,CAAqB,QAArB,EAA+BC,IAA/B,CAAoC,GAApC,CAAjB;AACA,YAAMC,WAAW,GAAGX,CAAC,CAACH,GAAG,CAACK,KAAJ,CAAUM,IAAX,CAArB;AACAV,MAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,MAAAA,GAAG,CAACQ,IAAJ,CAAS;AACPH,QAAAA,SAAS,EAAEN,GAAG,CAACK,KAAJ,CAAUC,SADd;AAEPS,QAAAA,UAAU,EAAEf,GAAG,CAACK,KAAJ,CAAUM,IAFf;AAGPK,QAAAA,MAAM,EAAEF;AAHD,OAAT;AAKD,KAXD,CAWE,OAAOG,GAAP,EAAY;AACZ;AACAC,MAAAA,OAAO,CAACR,KAAR,CAAcO,GAAd;AACAhB,MAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB,CAHY,CAIZ;AACA;;AACAP,MAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAT;AACD;AACF;AACF,CAvCD","sourcesContent":["import operations from '../../lib/operations.js'\n\nmodule.exports = (req, res) => {\n  res.setHeader('Access-Control-Allow-Origin', '*')\n  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept')\n\n  // Get the math function operation based\n  // on the operation that we're given\n  const f = operations[req.query.operation]\n\n  // If the url isn't malformed, send our response\n  // with an answer. If not, send an error response\n  if (f === undefined) {\n    res.statusCode = 400\n    res.json({\n      error: 'Unknown operation'\n    })\n  } else {\n    // Compute the requested calculation and respond.\n    // If we cannot compute it properly (error thrown),\n    // then tell the client\n    try {\n      // The result from passing the data parameter\n      // to the operation function\n      req.query.data = req.query.data.split('(over)').join('/')\n      const computation = f(req.query.data)\n      res.statusCode = 200\n      res.json({\n        operation: req.query.operation,\n        expression: req.query.data,\n        result: computation\n      })\n    } catch (err) {\n      // Record this error\n      console.error(err)\n      res.statusCode = 500\n      // Let the client know of our inability to\n      // perform the requested calculation\n      res.json({ error: 'Unable to perform calculation' })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}